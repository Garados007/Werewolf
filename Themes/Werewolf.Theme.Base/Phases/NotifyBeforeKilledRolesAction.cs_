using Werewolf.User;

namespace Werewolf.Theme.Phases;

[Obsolete]
public class NotifyBeforeKilledRolesAction : ActionPhaseBase
{
    public override void Execute(GameRoom game)
    {
        var dict = new Dictionary<string, HashSet<UserId>>();
        var executed = new HashSet<UserId>();
        bool doExecute = true;
        while (doExecute)
        {
            doExecute = false;
            foreach (var (id, entry) in game.Users)
                if (entry.Role != null && !executed.Contains(entry.User.Id))
                {
                    var hasOne = false;
                    foreach (var flag in entry.Role.Labels.GetEffects<Labels.KillInfoEffect>())
                    {
                        var lid = flag.NotificationId;
                        if (!dict.TryGetValue(lid, out HashSet<UserId>? set))
                            dict.Add(lid, set = new HashSet<UserId>());
                        _ = set.Add(id);
                        hasOne = doExecute = true;
                    }
                    if (hasOne)
                    {
                        foreach (var action in entry.Role.Labels.GetEffects<Labels.BeforeKillActionEffect>())
                        {
                            action.Execute(game, entry.Role);
                        }
                        executed.Add(entry.User.Id);
                    }
                }
        }
        if (dict.Count == 1)
        {
            var first = dict.First();
            game.SendEvent(new Events.PlayerNotification(first.Key, first.Value.ToArray()));
        }
        if (dict.Count > 1)
        {
            game.SendEvent(new Events.MultiPlayerNotification(dict));
        }
    }
}
